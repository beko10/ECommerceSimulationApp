// <auto-generated />
using System;
using ECommerceSimulationApp.DataAccessLayer.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ECommerceSimulationApp.DataAccessLayer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ECommerceSimulationApp.EntityLayer.Entity.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = "ed36652f-b238-4cc9-a646-e758ccf8e19f",
                            CategoryName = "Electronics",
                            CreatedDate = new DateTime(2024, 11, 23, 17, 11, 37, 149, DateTimeKind.Local).AddTicks(1828),
                            Description = "Electronic Items",
                            IsActive = true
                        },
                        new
                        {
                            Id = "cc7708f9-3b6f-454e-9f5f-5c721de8ef51",
                            CategoryName = "Books",
                            CreatedDate = new DateTime(2024, 11, 23, 17, 11, 37, 149, DateTimeKind.Local).AddTicks(1841),
                            Description = "Books and Stationery",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("ECommerceSimulationApp.EntityLayer.Entity.Customer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = "20bf8e13-9c70-4c34-968b-f6209174d83d",
                            City = "New York",
                            Country = "USA",
                            CreatedDate = new DateTime(2024, 11, 23, 17, 11, 37, 149, DateTimeKind.Local).AddTicks(3632),
                            CustomerName = "John Doe",
                            IsActive = true,
                            Phone = "1234567890"
                        },
                        new
                        {
                            Id = "5a9cf13b-b9a8-4758-b2a8-cc6b871d1009",
                            City = "London",
                            Country = "UK",
                            CreatedDate = new DateTime(2024, 11, 23, 17, 11, 37, 149, DateTimeKind.Local).AddTicks(3639),
                            CustomerName = "Jane Smith",
                            IsActive = true,
                            Phone = "9876543210"
                        });
                });

            modelBuilder.Entity("ECommerceSimulationApp.EntityLayer.Entity.Employee", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = "0ad68950-0cfe-4760-9fb0-23dd47a26842",
                            City = "Seattle",
                            Country = "USA",
                            CreatedDate = new DateTime(2024, 11, 23, 17, 11, 37, 149, DateTimeKind.Local).AddTicks(5332),
                            IsActive = true,
                            Name = "Alice",
                            Phone = "1122334455",
                            SurName = "Johnson"
                        },
                        new
                        {
                            Id = "e918542d-0292-434b-93f9-af4607c4b181",
                            City = "Toronto",
                            Country = "Canada",
                            CreatedDate = new DateTime(2024, 11, 23, 17, 11, 37, 149, DateTimeKind.Local).AddTicks(5349),
                            IsActive = true,
                            Name = "Bob",
                            Phone = "2233445566",
                            SurName = "Williams"
                        });
                });

            modelBuilder.Entity("ECommerceSimulationApp.EntityLayer.Entity.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EmployeeID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateOnly>("OrderDate")
                        .HasColumnType("date");

                    b.Property<string>("ShipAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ShipCity")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShipCountry")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = "5ebc3c5b-faa3-4c3f-a440-5cf050a5c294",
                            CreatedDate = new DateTime(2024, 11, 23, 17, 11, 37, 149, DateTimeKind.Local).AddTicks(7651),
                            CustomerID = "20bf8e13-9c70-4c34-968b-f6209174d83d",
                            EmployeeID = "0ad68950-0cfe-4760-9fb0-23dd47a26842",
                            IsActive = true,
                            OrderDate = new DateOnly(2024, 1, 15),
                            ShipAddress = "123 Main St",
                            ShipCity = "New York",
                            ShipCountry = "USA"
                        },
                        new
                        {
                            Id = "3cc0f5a0-2bfb-45f1-a76a-0be1af85f140",
                            CreatedDate = new DateTime(2024, 11, 23, 17, 11, 37, 149, DateTimeKind.Local).AddTicks(7663),
                            CustomerID = "5a9cf13b-b9a8-4758-b2a8-cc6b871d1009",
                            EmployeeID = "e918542d-0292-434b-93f9-af4607c4b181",
                            IsActive = true,
                            OrderDate = new DateOnly(2024, 2, 10),
                            ShipAddress = "456 Market St",
                            ShipCity = "London",
                            ShipCountry = "UK"
                        });
                });

            modelBuilder.Entity("ECommerceSimulationApp.EntityLayer.Entity.OrderDetail", b =>
                {
                    b.Property<string>("OrderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float");

                    b.HasKey("OrderID", "ProductID");

                    b.HasIndex("ProductID");

                    b.ToTable("OrderDetails");

                    b.HasData(
                        new
                        {
                            OrderID = "5ebc3c5b-faa3-4c3f-a440-5cf050a5c294",
                            ProductID = "ec7f37f5-fa71-4c01-a69b-711f266e24fe",
                            CreatedDate = new DateTime(2024, 11, 23, 17, 11, 37, 150, DateTimeKind.Local).AddTicks(3394),
                            IsActive = true,
                            Quantity = 1,
                            UnitPrice = 1200.0
                        },
                        new
                        {
                            OrderID = "3cc0f5a0-2bfb-45f1-a76a-0be1af85f140",
                            ProductID = "731e3c6a-db44-4674-9e24-0c81421b274a",
                            CreatedDate = new DateTime(2024, 11, 23, 17, 11, 37, 150, DateTimeKind.Local).AddTicks(3401),
                            IsActive = true,
                            Quantity = 3,
                            UnitPrice = 20.0
                        });
                });

            modelBuilder.Entity("ECommerceSimulationApp.EntityLayer.Entity.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Discontinued")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SupplierID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float");

                    b.Property<int>("UnitsInStock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryID");

                    b.HasIndex("SupplierID");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = "ec7f37f5-fa71-4c01-a69b-711f266e24fe",
                            CategoryID = "ed36652f-b238-4cc9-a646-e758ccf8e19f",
                            CreatedDate = new DateTime(2024, 11, 23, 17, 11, 37, 150, DateTimeKind.Local).AddTicks(5925),
                            Discontinued = false,
                            IsActive = true,
                            ProductName = "Laptop",
                            SupplierID = "a5d4e59c-1899-4941-8657-bc1fb30f518b",
                            UnitPrice = 1200.0,
                            UnitsInStock = 50
                        },
                        new
                        {
                            Id = "731e3c6a-db44-4674-9e24-0c81421b274a",
                            CategoryID = "cc7708f9-3b6f-454e-9f5f-5c721de8ef51",
                            CreatedDate = new DateTime(2024, 11, 23, 17, 11, 37, 150, DateTimeKind.Local).AddTicks(5932),
                            Discontinued = false,
                            IsActive = true,
                            ProductName = "T-Shirt",
                            SupplierID = "ce604596-7139-4412-b2d2-35bd5b1a161d",
                            UnitPrice = 20.0,
                            UnitsInStock = 200
                        });
                });

            modelBuilder.Entity("ECommerceSimulationApp.EntityLayer.Entity.Supplier", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ContactTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");

                    b.HasData(
                        new
                        {
                            Id = "a5d4e59c-1899-4941-8657-bc1fb30f518b",
                            City = "San Francisco",
                            CompanyName = "TechSupplier Inc.",
                            ContactTitle = "Manager",
                            Country = "USA",
                            CreatedDate = new DateTime(2024, 11, 23, 17, 11, 37, 150, DateTimeKind.Local).AddTicks(6788),
                            IsActive = true,
                            Phone = "3344556677"
                        },
                        new
                        {
                            Id = "ce604596-7139-4412-b2d2-35bd5b1a161d",
                            City = "Milan",
                            CompanyName = "Fashion World",
                            ContactTitle = "Owner",
                            Country = "Italy",
                            CreatedDate = new DateTime(2024, 11, 23, 17, 11, 37, 150, DateTimeKind.Local).AddTicks(6801),
                            IsActive = true,
                            Phone = "4455667788"
                        });
                });

            modelBuilder.Entity("ECommerceSimulationApp.EntityLayer.Entity.Order", b =>
                {
                    b.HasOne("ECommerceSimulationApp.EntityLayer.Entity.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerceSimulationApp.EntityLayer.Entity.Employee", "Employee")
                        .WithMany("Orders")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("ECommerceSimulationApp.EntityLayer.Entity.OrderDetail", b =>
                {
                    b.HasOne("ECommerceSimulationApp.EntityLayer.Entity.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerceSimulationApp.EntityLayer.Entity.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ECommerceSimulationApp.EntityLayer.Entity.Product", b =>
                {
                    b.HasOne("ECommerceSimulationApp.EntityLayer.Entity.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerceSimulationApp.EntityLayer.Entity.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("ECommerceSimulationApp.EntityLayer.Entity.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ECommerceSimulationApp.EntityLayer.Entity.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ECommerceSimulationApp.EntityLayer.Entity.Employee", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ECommerceSimulationApp.EntityLayer.Entity.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("ECommerceSimulationApp.EntityLayer.Entity.Product", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("ECommerceSimulationApp.EntityLayer.Entity.Supplier", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
